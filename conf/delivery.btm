

## Byteman script to measure delivery latency from reception of a message to its delivery
## (*excluding* the delivery time spent in the application)

## The delivery time is measured separately: this includes the message (or batch) in JChannel.up(Message) and
## JChannel.up(MessageBatch) until the call returns. This time may include the sending of a response, e.g. if the
## message is an RPC


HELPER org.perf.DeliveryHelper


################################# Initialization #####################################
## Channel created - needed to register DeliveryHelper as ProbeHandler
RULE ChannelCreated
CLASS org.jgroups.JChannel
METHOD init
AT EXIT
IF TRUE
    DO channelCreated($0);
ENDRULE
######################################################################################



################################# receive time #######################################
## Message received by the transport; associate time (in micros) with current thread
RULE MessageReceived
CLASS org.jgroups.protocols.TP
METHOD receive(org.jgroups.Address,byte[],int,int)
AT ENTRY
IF TRUE
    DO recordReceiveTime();
ENDRULE


## Message received by the transport; associate time (in micros) with current thread
RULE MessageReceivedInputStream
CLASS org.jgroups.protocols.TP
METHOD receive(org.jgroups.Address,java.io.DataInput)
AT ENTRY
IF TRUE
    DO recordReceiveTime();
ENDRULE


## Message deserialized; add PerfHeader with previously recorded receive time to the message
RULE AttachRecordedTimeToMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AFTER INVOKE org.jgroups.Message.readFrom
IF TRUE
    DO attachRecordedTimeTo($msg);
ENDRULE


## Batch deserialized; add PerfHeader with previously recorded receive time to each message in the batch
RULE AttachRecordedTimeToBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
AFTER WRITE $batches
IF TRUE
    DO attachRecordedTimeTo($batches);
ENDRULE


##### InfinispanCache: receive time

## Handles single messages or messages in a batch
RULE IspnMessageReception
CLASS org.jgroups.blocks.RequestCorrelator
METHOD receiveMessage
AT INVOKE dispatch
IF TRUE
    DO computeReceiveTime($1);
ENDRULE

# Cannot use dispatch AT ENTRY because dispatch() will be called multiple times and we don't want to record delivery!
RULE IspnBatchReception
CLASS org.jgroups.blocks.RequestCorrelator
METHOD receiveMessageBatch
AT ENTRY
IF TRUE
    DO computeReceiveTime($1);
ENDRULE


##### TriCache: receive time
## TriCache currently only implements receive(Message), once receive(MessageBatch), is implemented, the BatchDelivery
## rule needs to be changed

## Message to be delivered to application
RULE TriMessageDelivery
CLASS org.cache.impl.tri.TriCache
METHOD receive(org.jgroups.Message)
AT ENTRY
IF TRUE
    DO computeReceiveTime($1);
ENDRULE


## Message batch to be delivered to application
RULE TriBatchDelivery
CLASS org.cache.impl.tri.TriCache
METHOD receive(org.jgroups.util.MessageBatch)
AT ENTRY
IF TRUE
     DO computeReceiveTime($1);
ENDRULE
#########################################################################################





##################################### delivery time #####################################
## Record the time before up(Message)
RULE JChannelMessageBefore
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.Message)
AT ENTRY
IF TRUE
   DO recordDeliveryTime();
ENDRULE

## Record the time before up(MessageBatch)
RULE JChannelMessageBeforeBatch
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
AT ENTRY
IF TRUE
   DO recordDeliveryTime();
ENDRULE


## Compute the time after up(Message) returned
RULE JChannelMessageAfter
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.Message)
AT EXIT
IF TRUE
   DO afterDelivery();
ENDRULE

# Dividing the delivery time for a batch by the batch size is problematic, e.g. if a batch of 5 is
# received at time 0 and the 5 messages are delivered at times 20, 40, 60, 80 and 100, then the total
# time is 100, divided by 5 is 20 per message. However, this is incorrect as it ignores the waiting
# times for the individual messages: e.g. message 3 has to wait for 60 until it gets processed.
# The correct average delivery times would be (20+40+60+80+100)/5 = 60.
# However, we don't know in up(MessageBatch) when the individual messages are delivered, so we here we
# can only compute the delivery time of the entire batch. See DELIVERY_TIME protocol in JGroups
## Compute the time after up(MessageBatch) returned
RULE JChannelMessageAfterBatch
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
AT EXIT
IF TRUE
   DO afterDelivery();
ENDRULE
#########################################################################################









